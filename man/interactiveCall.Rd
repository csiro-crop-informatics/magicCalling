% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interactiveCall.R
\name{interactiveCall}
\alias{interactiveCall}
\title{Interactively recall a marker}
\usage{
interactiveCall(originalResult, startingPointFunction, n.iter, dbscanParameters,
  clusterModelParameters, ...)
}
\arguments{
\item{originalResult}{The previous attempt at calling this marker. Must be an object of class \code{markerResult}. If no attempt has previously been made, a suitable value is \code{list(data = data, hasVariability = TRUE)}, with class set to \code{markerResult}; this specifies that in the previous calling result, this marker was determined to be monomorphic.}

\item{startingPointFunction}{A function that generates a list of starting points for the model based clustering algorithm. Each starting point is a 2 x 2 matrix, containing two column vectors. These column vectors are the initial centers for the two homozygote clusters.}

\item{n.iter}{The number of MCMC iterations to use for the model based clustering algorithm.}

\item{dbscanParameters}{A list with named entries. Each entry is it self a list with two entries, named \code{eps} and \code{minPts}; these entries are arguments to the DBSCAN algorithm. Each name of the list \code{dbscanParameters} is used as a hotkey in the interactive calling. See below for details.}

\item{clusterModelParameters}{A list of parameters to the model based clustering algorithm. See \code{\link{fitClusterModel}} for further details.}

\item{...}{Undocumented arguments, used only for testing this function.}
}
\value{
An object of class \code{markerResult}, containing the details of the called marker.
}
\description{
Interactively recall a marker, using DBSCAN or model-based clustering.
}
\details{
This function allows the user to interactively recall a marker using (primarily) keyboard commands. The current marker calling result is displayed in a plot. Once a command is entered, hitting ENTER/RETURN runs the command. The commands are as follows:
\describe{
	\item{"k"}{Keep the current marker calling result and exit}
\item{"d"}{Discard this maker, by returning a result indicating that this marker is momomorphic}
\item{"o"}{Go back to the original result used as an input to this function}
\item{"c"}{Generate a new set of marker calls using the model-based clustering algorithm, OR show the next model-based calling result. Once the last model-based calling result has been displayed, command "c" generates a new set of marker calls.}
\item{"p"}{Apply the model-based clustering algorithm, but with the user selecting the initial centers of the two clusters by clicking on the plot.}
	\item{other}{If the input command is a name of an entry of \code{dbscanParameters}, then the corresponding entry of \code{dbscanParameters} is used as the parameters for the DBSCAN algorithm.}
}
}
\examples{
data("eightWayExampleData", package="magicCalling")
data <- eightWayExampleData[[1]]
#Original calling result marks the marker as monomorphic
originalResult <- list(hasVariability = FALSE, data = data)
class(originalResult) <- "markerResult"
#Specify the starting points for the model-based clustering algorithm. Four starting points, each specified twice. The y-coordinate is chosen as the mean of the y-coordinates of the input data. 
startingPointFunction <- function(data)
{
        meanY <- mean(data[,2])
        startingPoints <- list(
                rbind(c(0.5, meanY), c(0.5, meanY)),
                rbind(c(0.5, meanY), c(0.5, meanY)),
                rbind(c(0.25, meanY), c(0.5, meanY)),
                rbind(c(0.25, meanY), c(0.5, meanY)),
                rbind(c(0.75, meanY), c(0.5, meanY)),
                rbind(c(0.75, meanY), c(0.5, meanY)),
                rbind(c(0.8, meanY), c(0.2, meanY)),
                rbind(c(0.8, meanY), c(0.2, meanY))
        )
}
exampleDbscanParameters <- list("1" = list(eps = 0.04, minPts = 65), "2" = list(eps = 0.03, minPts = 105))
\dontrun{
#In this call, commands "1" and "2" run DBSCAN. Command "c" calls the model-based clustering algorithm, generating eight possible calls, and displays the first. The next seven commands "c" show the next model-based call. The eighth command "c" generates another eight possible calls and shows the first, etc. 
interactiveResult <- interactiveCall(originalResult, startingPointFunction = startingPointFunction, n.iter = 200, dbscanParameters = exampleDbscanParameters, clusterModelParameters = magicCalling:::exampleModelParameters)
}
}

